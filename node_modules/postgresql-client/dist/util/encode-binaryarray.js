"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.encodeBinaryArray = void 0;
const definitions_1 = require("../definitions");
const array_calculatedim_1 = require("./array-calculatedim");
function encodeBinaryArray(io, value, itemOid, options, encode) {
    itemOid = itemOid || definitions_1.DataTypeOIDs.varchar;
    const dim = (0, array_calculatedim_1.arrayCalculateDim)(value);
    const ndims = dim.length;
    const zeroOffset = io.offset;
    io.writeInt32BE(ndims) // Number of dimensions
        .writeInt32BE(0) // reserved for has-null flag
        .writeInt32BE(itemOid);
    for (let d = 0; d < ndims; d++) {
        io.writeInt32BE(dim[d]); // Number of items in dimension
        io.writeInt32BE(1); // LBound always 1.
    }
    let hasNull = false;
    let pos;
    const writeDim = (arr, level) => {
        const elemCount = dim[level];
        for (let i = 0; i < elemCount; i++) {
            if (level < dim.length - 1) {
                writeDim(arr && arr[i], level + 1);
                continue;
            }
            // if value is null
            if (!arr || arr[i] == null) {
                hasNull = true;
                io.writeInt32BE(-1);
                continue;
            }
            io.writeInt32BE(0); // reserved for data len
            pos = io.offset;
            encode(io, arr[i], options);
            // Update item data size
            io.buffer.writeInt32BE(io.length - pos, pos - 4);
        }
    };
    writeDim(value, 0);
    if (hasNull)
        io.buffer.writeInt32BE(1, zeroOffset + 4);
}
exports.encodeBinaryArray = encodeBinaryArray;
