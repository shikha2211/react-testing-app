"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseConnectionString = exports.getConnectionConfig = void 0;
const url_1 = __importDefault(require("url"));
const config_from_env_1 = require("./config-from-env");
const putil_merge_1 = __importDefault(require("putil-merge"));
function getConnectionConfig(config) {
    const cfg = (0, config_from_env_1.configFromEnv)();
    if (typeof config === 'string') {
        (0, putil_merge_1.default)(cfg, parseConnectionString(config));
    }
    else if (typeof config === 'object') {
        (0, putil_merge_1.default)(cfg, config);
    }
    if (cfg.host) {
        const x = parseConnectionString('' + cfg.host);
        (0, putil_merge_1.default)(cfg, x);
    }
    cfg.user = cfg.user || 'postgres';
    cfg.database = cfg.database || 'postgres';
    cfg.host = cfg.host || '127.0.0.1';
    return cfg;
}
exports.getConnectionConfig = getConnectionConfig;
function parseConnectionString(str) {
    if (str.startsWith('/'))
        str = 'socket:/' + str;
    if (!str.includes('://'))
        str = 'postgres://' + str;
    const parsed = url_1.default.parse(str, true);
    const getFirst = (v) => {
        return typeof v === 'string' ? v :
            (Array.isArray(v) ? v[0] : '');
    };
    const cfg = {};
    cfg.host = decodeURI(parsed.hostname || '');
    if (parsed.port)
        cfg.port = parseInt(parsed.port, 10);
    if (parsed.protocol === 'socket:' || parsed.protocol === 'unix:') {
        if (!cfg.host.startsWith('/'))
            cfg.host = '/' + cfg.host;
        cfg.host += decodeURI(parsed.pathname || '');
        if (parsed.query.db)
            cfg.database = decodeURI(getFirst(parsed.query.db));
    }
    else if (parsed.protocol === 'pg:' || parsed.protocol === 'postgres:') {
        if (parsed.pathname)
            cfg.database = decodeURI(parsed.pathname.substring(1));
    }
    if (parsed.query.host)
        cfg.host = decodeURI(getFirst(parsed.query.host));
    if (parsed.query.db)
        cfg.database = decodeURI(getFirst(parsed.query.db));
    if (parsed.query.schema)
        cfg.schema = decodeURI(getFirst(parsed.query.schema));
    if (parsed.query.application_name)
        cfg.applicationName = decodeURI(getFirst(parsed.query.application_name));
    if (parsed.auth) {
        const a = parsed.auth.split(':');
        if (a[0])
            cfg.user = a[0];
        if (a[1])
            cfg.password = a[1];
    }
    return cfg;
}
exports.parseConnectionString = parseConnectionString;
