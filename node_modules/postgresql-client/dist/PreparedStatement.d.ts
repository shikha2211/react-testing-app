import { Maybe, OID, QueryOptions, QueryResult, StatementPrepareOptions } from './definitions';
import { Connection } from './Connection';
import { SafeEventEmitter } from './SafeEventEmitter';
export declare class PreparedStatement extends SafeEventEmitter {
    private readonly _connection;
    private readonly _sql;
    private readonly _name;
    private readonly _paramTypes;
    protected _onErrorSavePoint: string;
    private _refCount;
    constructor(connection: Connection, sql: string, paramTypes?: OID[]);
    static prepare(connection: Connection, sql: string, options?: StatementPrepareOptions): Promise<PreparedStatement>;
    get connection(): Connection;
    get name(): Maybe<string>;
    get sql(): string;
    get paramTypes(): Maybe<Maybe<OID>[]>;
    execute(options?: QueryOptions): Promise<QueryResult>;
    close(): Promise<void>;
    cancel(): Promise<void>;
    protected _execute(options?: QueryOptions): Promise<QueryResult>;
    protected _close(): Promise<void>;
}
