"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GlobalTypeMap = exports.DataTypeMap = void 0;
const definitions_1 = require("./definitions");
const BoolType_1 = require("./data-types/BoolType");
const Int2Type_1 = require("./data-types/Int2Type");
const Int4Type_1 = require("./data-types/Int4Type");
const Int8Type_1 = require("./data-types/Int8Type");
const Float4Type_1 = require("./data-types/Float4Type");
const Float8Type_1 = require("./data-types/Float8Type");
const OidType_1 = require("./data-types/OidType");
const DateType_1 = require("./data-types/DateType");
const TimestampType_1 = require("./data-types/TimestampType");
const TimestamptzType_1 = require("./data-types/TimestamptzType");
const CharType_1 = require("./data-types/CharType");
const VarcharType_1 = require("./data-types/VarcharType");
const JsonType_1 = require("./data-types/JsonType");
const ByteaType_1 = require("./data-types/ByteaType");
const LsegType_1 = require("./data-types/LsegType");
const PointType_1 = require("./data-types/PointType");
const CircleType_1 = require("./data-types/CircleType");
const BoxType_1 = require("./data-types/BoxType");
const NumericType_1 = require("./data-types/NumericType");
const UuidType_1 = require("./data-types/UuidType");
const TimeType_1 = require("./data-types/TimeType");
class DataTypeMap {
    constructor(other) {
        this._itemsByOID = {};
        this._items = [];
        if (other instanceof DataTypeMap)
            Object.assign(this._items, other._items);
    }
    get(oid) {
        return this._itemsByOID[oid];
    }
    register(...dataTypes) {
        for (const t of dataTypes) {
            this._itemsByOID[t.oid] = t;
            const i = this._items.findIndex(tt => tt.oid === t.oid);
            if (i >= 0)
                this._items[i] = t;
            else
                this._items.push(t);
        }
    }
    determine(value) {
        if (value == null)
            return definitions_1.DataTypeOIDs.unknown;
        const valueIsArray = Array.isArray(value);
        for (const t of this._items) {
            if (valueIsArray) {
                if (t.elementsOID && t.isType(value[0]))
                    return t.oid;
            }
            else if (!t.elementsOID && t.isType(value))
                return t.oid;
        }
    }
}
exports.DataTypeMap = DataTypeMap;
exports.GlobalTypeMap = new DataTypeMap();
exports.GlobalTypeMap.register(BoolType_1.BoolType, BoolType_1.ArrayBoolType);
exports.GlobalTypeMap.register(Int4Type_1.Int4Type, Int4Type_1.ArrayInt4Type, Int8Type_1.Int8Type, Int8Type_1.ArrayInt8Type, Int2Type_1.Int2Type, Int2Type_1.ArrayInt2Type);
exports.GlobalTypeMap.register(Float8Type_1.Float8Type, Float8Type_1.ArrayFloat8Type, Float4Type_1.Float4Type, Float4Type_1.ArrayFloat4Type);
exports.GlobalTypeMap.register(NumericType_1.NumericType, NumericType_1.ArrayNumericType);
exports.GlobalTypeMap.register(UuidType_1.UuidType, UuidType_1.ArrayUuidType);
exports.GlobalTypeMap.register(TimestamptzType_1.TimestamptzType, TimestamptzType_1.ArrayTimestamptzType);
exports.GlobalTypeMap.register(TimestampType_1.TimestampType, TimestampType_1.ArrayTimestampType);
exports.GlobalTypeMap.register(DateType_1.DateType, DateType_1.ArrayDateType);
exports.GlobalTypeMap.register(TimeType_1.TimeType, TimeType_1.ArrayTimeType);
exports.GlobalTypeMap.register(OidType_1.OidType, OidType_1.ArrayOidType);
exports.GlobalTypeMap.register(JsonType_1.JsonType, JsonType_1.ArrayJsonType);
exports.GlobalTypeMap.register(ByteaType_1.ByteaType, ByteaType_1.ArrayByteaType);
exports.GlobalTypeMap.register(PointType_1.PointType, PointType_1.ArrayPointType);
exports.GlobalTypeMap.register(CircleType_1.CircleType, CircleType_1.ArrayCircleType);
exports.GlobalTypeMap.register(LsegType_1.LsegType, LsegType_1.ArrayLsegType);
exports.GlobalTypeMap.register(BoxType_1.BoxType, BoxType_1.ArrayBoxType);
exports.GlobalTypeMap.register(VarcharType_1.VarcharType, VarcharType_1.ArrayVarcharType);
exports.GlobalTypeMap.register(CharType_1.CharType, CharType_1.ArrayCharType);
exports.GlobalTypeMap.register(Object.assign(Object.assign({}, VarcharType_1.VarcharType), { name: 'bpchar', oid: definitions_1.DataTypeOIDs.bpchar }));
exports.GlobalTypeMap.register(Object.assign(Object.assign({}, VarcharType_1.ArrayVarcharType), { name: '_bpchar', oid: definitions_1.DataTypeOIDs._bpchar, elementsOID: definitions_1.DataTypeOIDs.bpchar }));
exports.GlobalTypeMap.register(Object.assign(Object.assign({}, VarcharType_1.VarcharType), { name: 'name', oid: definitions_1.DataTypeOIDs.name }));
exports.GlobalTypeMap.register(Object.assign(Object.assign({}, VarcharType_1.ArrayVarcharType), { name: '_name', oid: definitions_1.DataTypeOIDs._name, elementsOID: definitions_1.DataTypeOIDs.name }));
exports.GlobalTypeMap.register(Object.assign(Object.assign({}, VarcharType_1.VarcharType), { name: 'text', oid: definitions_1.DataTypeOIDs.text }));
exports.GlobalTypeMap.register(Object.assign(Object.assign({}, VarcharType_1.ArrayVarcharType), { name: '_text', oid: definitions_1.DataTypeOIDs._text, elementsOID: definitions_1.DataTypeOIDs.text }));
exports.GlobalTypeMap.register(Object.assign(Object.assign({}, VarcharType_1.VarcharType), { name: 'xml', oid: definitions_1.DataTypeOIDs.xml }));
exports.GlobalTypeMap.register(Object.assign(Object.assign({}, VarcharType_1.ArrayVarcharType), { name: '_xml', oid: definitions_1.DataTypeOIDs._xml, elementsOID: definitions_1.DataTypeOIDs.xml }));
